@precedence { times @left, plus @left }

@top Program { statement* }

statement {
    Constant {
        Variable "=" Expression ";"
    } |
    Replacement {
        LSymbol "->" Symbol+ ";"
    } |
    Command {
        Symbol ":" 
            ( Instruction "," )* Instruction ","? 
        ";"
    } |
    Start {
        "^" Symbol+ ";"
    }
}


Instruction { CommandName InstructionArg* }

InstructionArg { Expression }

Expression {
    Operation |
    Parenthesized {
        ("(" Operand ")")
    } |
    Variable |
    Number 
}


Operation {
    (Expression !times Op { "*" | "/" } Expression) |
    (Expression !plus Op { "+" | "-" } Expression)
}

Operand { Expression }

LSymbol { identifier }
Symbol { identifier }
Variable { identifier }
CommandName { identifier }

@tokens {
    
    identifier { $[a-zA-Z_] $[a-zA-Z_0-9]* }
    // Variable { $[a-zA-Z_] $[a-zA-Z_0-9]* }
    // CommandName { $[a-zA-Z_] $[a-zA-Z_0-9]* }

    Number { 
        "-"? ($[0-9]+ | 
        $[0-9]+ "."? $[0-9]* |
        $[0-9]* "."? $[0-9]+ )
    }

    LineComment { "//" ![\n]* }

    space { $[ \t\r\n]+ }
    
    @precedence { LineComment, "/" }
    @precedence { LineComment, "/" }
    @precedence { "-", Number }
}

@skip {
    space | LineComment
}

/*@top Program { expression* }

expression {
    Identifier |
    String |
    Boolean |
    Application { "(" expression* ")" }
}

@tokens {
    Identifier { $[a-zA-Z_0-9]+ }
  
    String { '"' (!["\\] | "\\" _)* '"' }
  
    Boolean { "#t" | "#f" }
  
    LineComment { ";" ![\n]* }
  
    space { $[ \t\n\r]+ }
  
    "(" ")"
}

@skip { space | LineComment }

@detectDelim*/